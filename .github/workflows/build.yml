name: build

on:
  workflow_run:
    workflows: ["ci"]
    types:
      - completed
  workflow_dispatch:

jobs:
  build-final-image:
    name: Build Final Image
    runs-on: ubuntu-latest

    permissions:
      packages: write

    steps:
      - uses: actions/checkout@v2

      - name: Set the .env file
        env:
          ENV_FILE: ${{secrets.ENV}}
        run: |
          touch .env
          echo $ENV_FILE | base64 -d > .env

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: Docker metadata for the application image build
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }},ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},value=1.0.0
            type=ref,event=pr
            type=ref,event=branch
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}

      - name: Docker Build and Push the application image to GHCR and Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: Dockerfile
          push: true
          target: production
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker metadata for nginx image build
        id: docker_meta_nginx
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}_nginx,ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}_nginx
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},value=1.0.0
            type=ref,event=pr
            type=ref,event=branch
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}

      - name: Docker Build and Push the nginx image to GHCR and Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: Dockerfile.nginx
          push: true
          target: production
          tags: ${{ steps.docker_meta_nginx.outputs.tags }}
          labels: ${{ steps.docker_meta_nginx.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy the final application in the host server
    needs: [build-final-image]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # - name: Sync files
      #   uses: SamKirkland/FTP-Deploy-Action@4.3.2
      #   with:
      #     server: ${{ secrets.HOST_IP }}
      #     username: ${{ secrets.HOST_USERNAME }}
      #     password: ${{ secrets.HOST_PASSWORD }}
      #     server-dir: /home/docker_compose_files/
      #     local-dir: ./
      #     exclude: |
      #       *
      #       **
      #       **/**
      #       !docker-compose.yml
      #       !docker-compose.production.yml

      - name: SSH to server and run deploy.sh bash script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          port: ${{ secrets.HOST_PORT }}
          script: /home/deploy.sh
