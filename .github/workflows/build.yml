name: build

on:
  workflow_run:
    workflows: ["ci"]
    types:
      - completed
  workflow_dispatch:

jobs:
  build-final-image:
    name: Build Final Image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set the .env file
        env:
          ENV_FILE: ${{secrets.ENV}}
        run: |
          touch .env
          echo $ENV_FILE | base64 -d > .env

      - name: Forcing docker to authorize local registry server's certificates
        run: |
          cp ./docker/certs/ca.crt /etc/docker/certs.d/${{ secrets.HOST_IP }}:5000/ca.crt
          cp ./docker/certs/ca.crt /etc/docker/certs.d/hirbod.info:5000/ca.crt
          ls -al /etc/docker/certs.d/
          ls -al /etc/docker/certs.d/${{ secrets.HOST_IP }}:5000
          ls -al /etc/docker/certs.d/hirbod.info:5000

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to local registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.HOST_IP }}:5000
          username: ${{ secrets.LOCAL_REGISTRY_USERNAME }}
          password: ${{ secrets.LOCAL_REGISTRY_PASSWORD }}

      - name: Docker metadata for the application image build
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},value=1.0.0
            type=ref,event=pr
            type=ref,event=branch
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}

      - name: Docker Build and Push the application image to Docker Hub and local registry
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: Dockerfile
          push: true
          target: production
          tags: |
            ${{ secrets.HOST_IP }}:5000/${{ steps.docker_meta.outputs.tags }}
            ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Docker metadata for nginx image build
        id: docker_meta_nginx
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}_nginx
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},value=1.0.0
            type=ref,event=pr
            type=ref,event=branch
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}

      - name: Docker Build and Push the nginx image to Docker Hub and local registry
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: Dockerfile.nginx
          push: true
          target: production
          tags: |
            ${{ steps.docker_meta_nginx.outputs.tags }}
            ${{ secrets.HOST_IP }}:5000/${{ steps.docker_meta_nginx.outputs.tags }}
          labels: ${{ steps.docker_meta_nginx.outputs.labels }}

      - name: Push Image from docker hub to local registry
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: docker.io/mysql:5
          dst: |
            ${{ secrets.HOST_IP }}:5000/mysql:5

  deploy:
    name: Deploy the final application in the host server
    needs: [build-final-image]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Sync files
        uses: SamKirkland/FTP-Deploy-Action@4.3.2
        with:
          server: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_FTP_USERNAME }}
          password: ${{ secrets.HOST_FTP_PASSWORD }}
          local-dir: ./
          exclude: |
            *
            **
            **/**
            !docker-compose.stack.yml
            !deploy.sh

      - name: SSH to server and run deploy.sh bash script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          port: ${{ secrets.HOST_PORT }}
          script: chmod u+x /home/hirbod/deploy.sh && /home/hirbod/deploy.sh
